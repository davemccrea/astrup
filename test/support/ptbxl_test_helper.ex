defmodule PTBXLTestHelper do
  @moduledoc """
  Test helper functions for PTB-XL dataset tests.
  """

  @doc """
  Sample CSV content for testing parser functionality.
  """
  def sample_csv_content do
    """
    ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
    1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12   E,1984-11-09 09:17:34,sinusrhythmus periphere niederspannung,"{'NORM': 100.0, 'LVOLT': 0.0, 'SR': 0.0}",,,,,False,False,True,," , I-V1,  ",,,,,9,records100/00000/00001_lr,records500/00000/00001_hr
    2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12   E,1984-11-14 12:55:37,sinusbradykardie sonst normales ekg,"{'NORM': 80.0, 'SBRAD': 0.0}",,,,,False,False,True,,,,,,,10,records100/00000/00002_lr,records500/00000/00002_hr
    3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12   E,1984-11-15 12:49:10,sinusrhythmus normales ekg,"{'AMI': 100.0, 'NORM': 20.0}",,,,,False,False,True,,,,,,,5,records100/00000/00003_lr,records500/00000/00003_hr
    4,17014.0,24.0,0,,82.0,2.0,0.0,CS-12   E,1984-11-15 13:44:57,sinusrhythmus normales ekg,"{'CLBBB': 90.0, 'NORM': 10.0}",,,,,False,False,True," , II,III,AVF",,,,,,9,records100/00000/00004_lr,records500/00000/00004_hr
    5,17448.0,19.0,1,,70.0,2.0,0.0,CS-12   E,1984-11-17 10:43:15,sinusrhythmus normales ekg,"{'NST_': 85.0, 'NORM': 15.0}",,,,,False,False,True," , III,AVR,AVF",,,,,,10,records100/00000/00005_lr,records500/00000/00005_hr
    """
  end

  @doc """
  Creates a sample ECG record for testing.
  """
  def sample_ecg_record(overrides \\ %{}) do
    defaults = %{
      ecg_id: 1,
      patient_id: 15709.0,
      age: 56.0,
      sex: 1,
      height: nil,
      weight: 63.0,
      nurse: 2.0,
      site: 0.0,
      device: "CS-12   E",
      recording_date: ~N[1984-11-09 09:17:34],
      report: "sinusrhythmus periphere niederspannung",
      scp_codes: %{"NORM" => 100.0, "LVOLT" => 0.0, "SR" => 0.0},
      heart_axis: nil,
      infarction_stadium1: nil,
      infarction_stadium2: nil,
      validated_by: nil,
      second_opinion: false,
      initial_autogenerated_report: false,
      validated_by_human: true,
      baseline_drift: nil,
      static_noise: " , I-V1,  ",
      burst_noise: nil,
      electrodes_problems: nil,
      extra_beats: nil,
      pacemaker: nil,
      strat_fold: 9,
      filename_lr: "records100/00000/00001_lr",
      filename_hr: "records500/00000/00001_hr"
    }

    Map.merge(defaults, overrides)
  end

  @doc """
  Creates a list of sample ECG records for testing filtering and selection.
  """
  def sample_ecg_records do
    [
      sample_ecg_record(%{
        ecg_id: 1,
        scp_codes: %{"NORM" => 100.0, "SR" => 50.0},
        strat_fold: 9,
        validated_by_human: true,
        electrodes_problems: nil,
        baseline_drift: nil,
        pacemaker: nil
      }),
      sample_ecg_record(%{
        ecg_id: 2,
        scp_codes: %{"AMI" => 90.0, "NORM" => 10.0, "ABQRS" => 75.0},
        strat_fold: 10,
        validated_by_human: true,
        electrodes_problems: nil,
        baseline_drift: nil,
        pacemaker: nil
      }),
      sample_ecg_record(%{
        ecg_id: 3,
        scp_codes: %{"CLBBB" => 85.0, "SARRH" => 40.0},
        strat_fold: 9,
        validated_by_human: true,
        electrodes_problems: nil,
        baseline_drift: nil,
        pacemaker: nil
      }),
      sample_ecg_record(%{
        ecg_id: 4,
        scp_codes: %{"NST_" => 80.0, "PVC" => 60.0},
        strat_fold: 10,
        validated_by_human: true,
        electrodes_problems: nil,
        baseline_drift: nil,
        pacemaker: nil
      }),
      # Low quality record (should be filtered out)
      sample_ecg_record(%{
        ecg_id: 5,
        scp_codes: %{"NORM" => 100.0},
        strat_fold: 5,
        validated_by_human: false,
        electrodes_problems: "major",
        baseline_drift: "significant",
        pacemaker: "present"
      })
    ]
  end

  @doc """
  Creates a temporary CSV file with sample content for testing.
  """
  def create_temp_csv_file(content \\ nil) do
    content = content || sample_csv_content()
    temp_file = System.tmp_dir!() |> Path.join("test_ptbxl_#{:rand.uniform(10000)}.csv")
    File.write!(temp_file, content)
    temp_file
  end

  @doc """
  Cleanup temporary files.
  """
  def cleanup_temp_file(file_path) do
    File.rm(file_path)
  end
end
