defmodule Astrup.Datasets.PTBXL.ParserTest do
  use ExUnit.Case, async: true

  alias Astrup.Datasets.PTBXL.Parser

  describe "parse_string/1" do
    test "parses valid CSV content successfully" do
      content = PTBXLTestHelper.sample_csv_content()

      assert {:ok, %{header: header, rows: rows}} = Parser.parse_string(content)

      # Check header
      assert header == [
               :ecg_id,
               :patient_id,
               :age,
               :sex,
               :height,
               :weight,
               :nurse,
               :site,
               :device,
               :recording_date,
               :report,
               :scp_codes,
               :heart_axis,
               :infarction_stadium1,
               :infarction_stadium2,
               :validated_by,
               :second_opinion,
               :initial_autogenerated_report,
               :validated_by_human,
               :baseline_drift,
               :static_noise,
               :burst_noise,
               :electrodes_problems,
               :extra_beats,
               :pacemaker,
               :strat_fold,
               :filename_lr,
               :filename_hr
             ]

      # Check rows
      assert length(rows) == 5

      # Check first row
      first_row = hd(rows)
      assert first_row.ecg_id == 1
      assert first_row.patient_id == 15709.0
      assert first_row.age == 56.0
      assert first_row.sex == 1
      assert first_row.height == nil
      assert first_row.weight == 63.0
      assert first_row.validated_by_human == true
      assert first_row.strat_fold == 9
      assert first_row.scp_codes == %{"NORM" => 100.0, "LVOLT" => 0.0, "SR" => 0.0}
    end

    test "handles Latin-1 encoded characters in reports" do
      # Create a simple CSV with Latin-1 encoded characters
      # Just test that the parser can handle a valid CSV with proper encoding
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      6,12345.0,45.0,1,,75.0,1.0,0.0,CS-12,1984-11-20 14:30:15,normal test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,records100/00000/00006_lr,records500/00000/00006_hr
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      # Check that the report field is properly parsed
      first_row = hd(rows)
      assert String.valid?(first_row.report)
      assert first_row.report == "normal test report"
    end

    test "handles empty CSV content" do
      empty_content =
        "ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr\n"

      assert {:ok, %{header: header, rows: []}} = Parser.parse_string(empty_content)
      assert length(header) == 28
    end

    test "returns error for malformed CSV" do
      malformed_content = "not,a,valid,csv\nwith,missing,fields"

      assert {:error, reason} = Parser.parse_string(malformed_content)
      assert is_binary(reason)
    end
  end

  describe "parse_file/1" do
    test "parses valid CSV file successfully" do
      temp_file = PTBXLTestHelper.create_temp_csv_file()

      assert {:ok, %{header: header, rows: rows}} = Parser.parse_file(temp_file)

      assert length(header) == 28
      assert length(rows) == 5

      PTBXLTestHelper.cleanup_temp_file(temp_file)
    end

    test "returns error for non-existent file" do
      assert {:error, reason} = Parser.parse_file("non_existent_file.csv")
      assert String.contains?(reason, "File read error")
    end
  end

  describe "SCP codes parsing" do
    test "parses Python dict format correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0, 'LVOLT': 0.0, 'SR': 0.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"{'AMI': 90.0, 'NORM': 10.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"",,,,,False,False,True,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.scp_codes == %{"NORM" => 100.0, "LVOLT" => 0.0, "SR" => 0.0}
      assert row2.scp_codes == %{"AMI" => 90.0, "NORM" => 10.0}
      assert row3.scp_codes == %{}
    end

    test "handles malformed SCP codes gracefully" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': invalid_value}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"not_a_dict",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"{'NORM': 100.0",,,,,False,False,True,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      # All malformed SCP codes should result in empty maps
      Enum.each(rows, fn row ->
        assert row.scp_codes == %{}
      end)
    end
  end

  describe "type conversion" do
    test "converts integers correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"{'NORM': 50.0}",,,,,False,False,True,,,,,,,,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.ecg_id == 1
      assert row1.strat_fold == 9
      assert row2.ecg_id == 2
      assert row2.strat_fold == 10
      assert row3.ecg_id == 3
      assert row3.strat_fold == nil
    end

    test "converts floats correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.5,1,,63.2,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,,1,,,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"{'NORM': 50.0}",,,,,False,False,True,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.age == 56.5
      assert row1.weight == 63.2
      assert row2.age == 19.0
      assert row2.weight == 70.0
      assert row3.age == nil
      assert row3.weight == nil
    end

    test "converts booleans correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,True,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"{'AMI': 90.0}",,,,,True,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"{'NORM': 50.0}",,,,,,,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.validated_by_human == true
      assert row1.second_opinion == false
      assert row2.validated_by_human == true
      assert row2.second_opinion == true
      assert row3.validated_by_human == nil
      assert row3.second_opinion == nil
    end

    test "converts datetime correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,2020-12-25 14:30:00,test report 2,"{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,1,,69.0,2.0,0.0,CS-12,,test report 3,"{'NORM': 50.0}",,,,,False,False,True,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.recording_date == ~N[1984-11-09 09:17:34]
      assert row2.recording_date == ~N[2020-12-25 14:30:00]
      assert row3.recording_date == nil
    end

    test "converts sex field correctly" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,0,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,1,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,test report 2,"{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      3,20372.0,37.0,,,69.0,2.0,0.0,CS-12,1984-11-15 12:49:10,test report 3,"{'NORM': 50.0}",,,,,False,False,True,,,,,,,5,test_lr3,test_hr3
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2, row3] = rows

      assert row1.sex == 0
      assert row2.sex == 1
      assert row3.sex == nil
    end
  end

  describe "CSV parsing with special characters" do
    test "handles quoted fields with commas" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,"sinusrhythmus, normales ekg","{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,"test with, multiple, commas","{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2] = rows

      assert row1.report == "sinusrhythmus, normales ekg"
      assert row2.report == "test with, multiple, commas"
    end

    test "handles escaped quotes in fields" do
      content = """
      ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
      1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,"test with ""quotes"" inside","{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
      2,13243.0,19.0,0,,70.0,2.0,0.0,CS-12,1984-11-14 12:55:37,"another ""test"" case","{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
      """

      assert {:ok, %{rows: rows}} = Parser.parse_string(content)

      [row1, row2] = rows

      assert row1.report == "test with \"quotes\" inside"
      assert row2.report == "another \"test\" case"
    end
  end
end
