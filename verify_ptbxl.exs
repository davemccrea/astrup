#!/usr/bin/env elixir

# Verification script for PTB-XL dataset modules
# Usage: mix run verify_ptbxl.exs

defmodule PTBXLVerification do
  def run do
    IO.puts("üîç Verifying PTB-XL Dataset Modules")
    IO.puts("=" <> String.duplicate("=", 35))

    # Test module imports
    test_imports()

    # Test with synthetic data
    test_synthetic_data()

    # Test with real data if available
    test_real_data()

    IO.puts("\n‚úÖ Verification complete!")
  end

  defp test_imports do
    IO.puts("\nüì¶ Testing module imports...")

    try do
      alias Astrup.Datasets.PTBXL.Parser
      alias Astrup.Datasets.PTBXL.Selector
      alias Astrup.Datasets.PTBXL

      IO.puts("  ‚úÖ All modules imported successfully")
    rescue
      error ->
        IO.puts("  ‚ùå Module import failed: #{Exception.message(error)}")
        System.halt(1)
    end
  end

  defp test_synthetic_data do
    IO.puts("\nüß™ Testing with synthetic data...")

    sample_csv = """
    ecg_id,patient_id,age,sex,height,weight,nurse,site,device,recording_date,report,scp_codes,heart_axis,infarction_stadium1,infarction_stadium2,validated_by,second_opinion,initial_autogenerated_report,validated_by_human,baseline_drift,static_noise,burst_noise,electrodes_problems,extra_beats,pacemaker,strat_fold,filename_lr,filename_hr
    1,15709.0,56.0,1,,63.0,2.0,0.0,CS-12,1984-11-09 09:17:34,test report,"{'NORM': 100.0}",,,,,False,False,True,,,,,,,9,test_lr,test_hr
    2,13243.0,45.0,0,,70.0,2.0,0.0,CS-12,1984-11-10 10:15:20,test report 2,"{'AMI': 90.0}",,,,,False,False,True,,,,,,,10,test_lr2,test_hr2
    """

    case Astrup.Datasets.PTBXL.parse_string(sample_csv) do
      {:ok, %{rows: rows}} ->
        IO.puts("  ‚úÖ Parser works with synthetic data")

        first_row = hd(rows)
        diagnosis = Astrup.Datasets.PTBXL.get_primary_diagnosis(first_row)
        IO.puts("  ‚úÖ Primary diagnosis: #{diagnosis}")

        diagnoses = Astrup.Datasets.PTBXL.get_available_diagnoses(rows)
        IO.puts("  ‚úÖ Available diagnoses: #{length(diagnoses)}")

        selected = Astrup.Datasets.PTBXL.select_by_diagnosis(rows, %{"NORM" => 1})
        IO.puts("  ‚úÖ Record selection: #{length(selected)} selected")

      {:error, reason} ->
        IO.puts("  ‚ùå Synthetic data test failed: #{reason}")
        System.halt(1)
    end
  end

  defp test_real_data do
    IO.puts("\nüìä Testing with real data...")

    data_file = "lib/astrup/datasets/ptbxl/ptbxl_database.csv"

    case File.exists?(data_file) do
      true ->
        case Astrup.Datasets.PTBXL.parse_file(data_file) do
          {:ok, %{rows: rows}} ->
            IO.puts("  ‚úÖ Real data parsed: #{length(rows)} records")

            # Test with sample for speed
            sample = Enum.take(rows, 50)

            diagnoses = Astrup.Datasets.PTBXL.get_available_diagnoses(sample)
            IO.puts("  ‚úÖ Real data diagnoses: #{length(diagnoses)}")

            codes = Astrup.Datasets.PTBXL.get_all_scp_codes(sample, :clean_signal)
            IO.puts("  ‚úÖ Real data SCP codes: #{length(codes)}")

          {:error, reason} ->
            IO.puts("  ‚ùå Real data test failed: #{reason}")
        end

      false ->
        IO.puts("  ‚ö†Ô∏è  Real data file not found: #{data_file}")
        IO.puts("      This is normal if the dataset hasn't been downloaded yet")
    end
  end
end

PTBXLVerification.run()
